import itertools

def calculate_distance(coords1, coords2):

    return ((coords1[0] - coords2[0])**2 + (coords1[1] - coords2[1])**2) ** 0.5

def total_distance(path, cities):
    
    distance = 0
    for i in range(len(path) - 1):
        distance += calculate_distance(cities[path[i]], cities[path[i+1]])
    distance += calculate_distance(cities[path[-1]], cities[path[0]])  
    return distance

def brute_force_tsp(cities):
    num_cities = len(cities)
    if num_cities <= 2:
        return cities

    min_distance = float('inf')
    min_path = None

    for path in itertools.permutations(range(num_cities)):
        distance = total_distance(path, cities)
        if distance < min_distance:
            min_distance = distance
            min_path = path

    return min_path

if __name__ == "__main__":
    cities = [(0, 0), (1, 2), (3, 1), (5, 2), (6, 0)]  
    optimal_path = brute_force_tsp(cities)
    print("Optimal TSP path:", optimal_path)
    print("Optimal TSP distance:", total_distance(optimal_path, cities))
