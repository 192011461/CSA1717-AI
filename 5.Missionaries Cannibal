from collections import deque

class State:
    def __init__(self, missionaries, cannibals, boat_side):
        self.missionaries = missionaries
        self.cannibals = cannibals
        self.boat_side = boat_side

    def __eq__(self, other):
        return self.missionaries == other.missionaries and \
               self.cannibals == other.cannibals and \
               self.boat_side == other.boat_side

    def __hash__(self):
        return hash((self.missionaries, self.cannibals, self.boat_side))

    def is_valid(self):
        if self.missionaries < 0 or self.missionaries > 3 or \
           self.cannibals < 0 or self.cannibals > 3:
            return False
        if self.missionaries < self.cannibals and self.missionaries > 0:
            return False
        if 3 - self.missionaries < 3 - self.cannibals and 3 - self.missionaries > 0:
            return False
        return True

    def is_goal(self):
        return self.missionaries == 0 and self.cannibals == 0 and self.boat_side == 0

    def get_neighbors(self):
        neighbors = []
        if self.boat_side == 1:
            for i in range(3):
                for j in range(3):
                    state = State(self.missionaries - i, self.cannibals - j, 0)
                    if state.is_valid():
                        neighbors.append(state)
        else:
            for i in range(3):
                for j in range(3):
                    state = State(self.missionaries + i, self.cannibals + j, 1)
                    if state.is_valid():
                        neighbors.append(state)
        return neighbors

    def __str__(self):
        return f"Missionaries: {self.missionaries}, Cannibals: {self.cannibals}, Boat: {'left' if self.boat_side == 1 else 'right'}"

def bfs(start):
    visited = set()
    queue = deque()
    queue.append((start, []))

    while queue:
        current_state, path = queue.popleft()
        visited.add(current_state)

        if current_state.is_goal():
            return path + [current_state]

        for neighbor in current_state.get_neighbors():
            if neighbor not in visited:
                queue.append((neighbor, path + [current_state]))

    return None

def print_solution(solution):
    for idx, state in enumerate(solution):
        print(f"Step {idx + 1}: {state}")

if __name__ == "__main__":
    start_state = State(3, 3, 1)
    solution = bfs(start_state)
    if solution:
        print("Solution found:")
        print_solution(solution)
    else:
        print("No solution exists.")
